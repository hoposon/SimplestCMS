type Query {
  urls: [URL]
  pages(urlId: ID!): [Page]
  dirs(urlId: ID!): [Dir]
  dirAssets(assetQ: AssetQueryParams!): [Asset]
}

type Mutation {
	signup(email: String!, nickName: String, firstName: String, lastName: String, password: String!): User
	login(email: String!, password: String!): User
	createUrl(urlName: String!): URL
	createPage(page: PageInput): Page
	createDir(dir: DirInput): Dir
	storeAssets(fileObj: FileInput!): String
	# storeAssets(file: Upload!): File
}

type User {
  	id: ID!
	email: String!
  	nickName: String
  	firstName: String
  	lastName: String
	token: String!
	roles: [String!]
}

type URL {
	id: ID!
	urlName: String!
	isOwner: Boolean!
}

type Page {
	id: ID!
	pageName: String
	pageCode: String!
	urlId: ID!
	subUrl: String
}

input PageInput {
	pageName: String
	pageCode: String!
	urlId: ID!
	subUrl: String
}

type Dir {
	id: ID!
	dirName: String!
	parentDir: ID
	isRoot: Boolean
	urlId: ID!	
}

input DirInput {
	dirName: String!
	parentDir: ID
	urlId: ID!	
}

input FileInput {
	file: Upload!
	uploadDirId: ID!
	urlId: ID!
}

scalar Upload

input AssetQueryParams {
	dirId: ID!
	urlid: ID!
}

type Asset {
	assetUrl: String!
	assetName: String!
	assetType: String!
}

# type File {
# 	assetPath: String!
# }

# type Content {
# 	simple: [String]
# 	asset: [Asset!]
# 	gallery: [Gallery!]
# }

# type Simple {
# 	id: ID!
# 	name: String
# 	code: String!
# 	text: String
# }

# type Asset {
# 	id: ID!
# 	name: String
# 	code: String!
# 	asset: 
# 	assetType: String
# 	storage: Storage!
# }

# type Gallery {
# 	id: ID!
# 	name: String
# 	code: String!
# 	asset: [Asset!]!
# }

# type Storage {
# 	id: ID!
# 	name: String!
# 	path: String!
# 	folders: [Storage!]
# }