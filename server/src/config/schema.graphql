type Query {
  urls: [URL]
  pages(urlId: ID!): [Page]
}

type Mutation {
	# signup(email: String!, nickName: String, firstName: String, lastName: String, password: String!): AuthPayload
  	# login(email: String!, password: String!): AuthPayload
	signup(email: String!, nickName: String, firstName: String, lastName: String, password: String!): User
	login(email: String!, password: String!): User
	createUrl(urlName: String!): URL
	createDir(dirName: String!, urlId: ID!, parentDir: ID): DIR
	createPage(page: PageInput): Page
}

# type AuthPayload {
#   	token: String
#   	user: User
# }

type User {
  	id: ID!
	email: String!
  	nickName: String
  	firstName: String
  	lastName: String
	token: String!
	roles: [String!]
}

type URL {
	id: ID!
	urlName: String!
	isOwner: Boolean!
}

type DIR {
	id: ID!
	dirName: String!
	urlId: ID!
	parentDir: ID
}

type Page {
	id: ID!
	pageName: String
	pageCode: String!
	urlId: ID!
	subUrl: String
}

input PageInput {
	pageName: String
	pageCode: String!
	urlId: ID!
	subUrl: String
}

# type Content {
# 	simple: [String]
# 	asset: [Asset!]
# 	gallery: [Gallery!]
# }

# type Simple {
# 	id: ID!
# 	name: String
# 	code: String!
# 	text: String
# }

# type Asset {
# 	id: ID!
# 	name: String
# 	code: String!
# 	asset: 
# 	assetType: String
# 	storage: Storage!
# }

# type Gallery {
# 	id: ID!
# 	name: String
# 	code: String!
# 	asset: [Asset!]!
# }

# type Storage {
# 	id: ID!
# 	name: String!
# 	path: String!
# 	folders: [Storage!]
# }